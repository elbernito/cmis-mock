Baue mir eine Springboot 3 3.5.0 mit maven unterstützung. Die Anwendung muss über controller, service, impl, repository, dto, mappings und modelle verfügen. Ebenso ist ein Excptionhandling zu implementieren.

Das Projekt ist mit java 21 zu erstellen und jede klasse ist auszuprogrammieren, komplett mit Javadoc (englisch), sowie erweitertem Logging (info, debug, etc.)

Es ist eine H2 inmemory DB zu verwenden.

Die Anwendung läuft auf port 9000. 

Es sind keine data.sql und schema.sql zu verwenden, ausschalten. Das erstellen der Tabellen ist mit "create-drop" zu gewährleisten.

Lombok soll verwendet werden. Besonders das toString muss automatisch entwender mit lombok oder ReflectionToStringBuilder erstellt werden.

Ebenso ist Swagger (sehr detailiert) zu verwenden, inkl. config klasse

Promtheus ist zu integrieren, inkl. Config klasse

Verwende keine streams und lambdas

Erstelle application.yaml mit allen konfigurationen, pom.xml und readme.md

Erstelle Testklassen für alle Controller Klassen

Alle Klassen, Methoden und Variablen müssen aufeinander stimmen. Keine eigenkreationen.

Du implementierst immer alles aus. Komplett ohne Todo, etc.

Gib immer die ganzen klassen und dateien aus

Es darf keine Kompilierungsfehler geben!

das grund package ist ch.elbernito.cmis.mock

wiederhole dich nicht bei der ausgabe von klassen und dateien

gib jede einzelne Datei im chat aus, so dass ich sie kopieren kann

erarbeite alles zuerst im speicher und prüfe es drei mal

Erstelle die controller, service, impl, repository, dto, mappings und modelle nach der nachfolgenden nummerierung immer komplett mit testklasse. Beziehungen wie manytoOne unter den modellen und imeplementationen sind von anfang an einzubeziehen und zu erstellen.

Jedes Modell hat eine ID die numerisch, automtaisch hochgezählt wird. Für die identifikation z. B.: DocumentId ist eine UUID zu verwenden und soll automatisch erstellt werden.


# CMIS REST Endpunkte Übersicht

## 1. Repository
- GET     /api/repositories               – Liste aller Repositories
- GET     /api/repositories/{id}          – Details zu einem Repository
- GET     /api/repositories/{id}/info     – Repository-Infos (Capabilities etc.)

## 2. Object (CMIS-Objekt, generisch)
- GET     /api/objects/{objectId}                  – Hole beliebiges Objekt (Dokument, Ordner, etc.)
- GET     /api/objects/by-path                     – Hole Objekt anhand Pfad (getObjectByPath)
- POST    /api/objects/{objectId}/move             – Objekt verschieben (moveObject)
- POST    /api/objects/{objectId}/copy             – Objekt kopieren (copyObject)
- GET     /api/objects/{objectId}/allowableActions – Erlaubte Aktionen abfragen (getAllowableActions)
- GET     /api/objects/{objectId}/relationships    – Beziehungen zu Objekt holen (getRelationships)

## 3. Document
- POST    /api/documents                          – Neues Dokument erstellen
- GET     /api/documents/{documentId}             – Dokument holen
- PUT     /api/documents/{documentId}             – Dokument aktualisieren
- DELETE  /api/documents/{documentId}             – Dokument löschen
- POST    /api/documents/{documentId}/checkin     – Dokument einchecken
- POST    /api/documents/{documentId}/checkout    – Dokument auschecken
- GET     /api/documents/{documentId}/versions    – Versionen des Dokuments auflisten
- GET     /api/documents/{documentId}/content     – Dokument-Inhalt herunterladen
- POST    /api/documents/{documentId}/content     – Dokument-Inhalt hochladen/aktualisieren

## 4. Folder
- POST    /api/folders                           – Ordner erstellen
- GET     /api/folders/{folderId}                – Ordner holen
- PUT     /api/folders/{folderId}                – Ordner aktualisieren
- DELETE  /api/folders/{folderId}                – Ordner löschen
- GET     /api/folders/{folderId}/children       – Unterobjekte holen (getChildren)
- GET     /api/folders/{folderId}/descendants    – Nachkommen holen (getFolderTree)
- GET     /api/folders/{folderId}/parent         – Übergeordneten Ordner holen (getParent)
- DELETE  /api/folders/{folderId}/tree           – Kompletten Ordnerbaum löschen (deleteTree)
- GET     /api/folders/{folderId}/checkedout     – Ausgecheckte Dokumente im Ordner (getCheckedOutDocs)

## 5. Version
- GET     /api/versions/{versionId}               – Einzelne Version holen
- GET     /api/documents/{documentId}/versions    – Alle Versionen eines Dokuments

## 6. Metadata
- POST    /api/metadata                          – Metadatum erstellen
- GET     /api/metadata/{metadataId}             – Metadatum holen
- PUT     /api/metadata/{metadataId}             – Metadatum aktualisieren
- DELETE  /api/metadata/{metadataId}             – Metadatum löschen
- GET     /api/documents/{documentId}/metadata   – Metadaten eines Dokuments

## 7. Relationship
- POST    /api/relationships                     – Beziehung erstellen
- GET     /api/relationships/{relationshipId}    – Beziehung holen
- DELETE  /api/relationships/{relationshipId}    – Beziehung löschen
- GET     /api/objects/{objectId}/relationships  – Beziehungen eines Objekts

## 8. Policy
- POST    /api/policies                         – Policy erstellen
- GET     /api/policies/{policyId}              – Policy holen
- DELETE  /api/policies/{policyId}              – Policy löschen
- POST    /api/objects/{objectId}/policies      – Policy anwenden
- DELETE  /api/objects/{objectId}/policies/{policyId} – Policy entfernen

## 9. ACL (Access Control List)
- GET     /api/objects/{objectId}/acl           – ACL holen
- PUT     /api/objects/{objectId}/acl           – ACL setzen/ändern

## 10. Retention
- POST    /api/retentions                       – Retention erstellen
- GET     /api/retentions/{retentionId}         – Retention holen
- DELETE  /api/retentions/{retentionId}         – Retention löschen
- GET     /api/objects/{objectId}/retentions    – Retentions zu Objekt

## 11. ChangeLog
- GET     /api/changelog                        – ChangeLog-Einträge abfragen

## 12. TypeDefinition
- GET     /api/types                            – Alle Typen auflisten
- GET     /api/types/{typeId}                   – Typdetails


Konfiguration:
Das Repository muss via Springboot Config konfigurierbar sein, ebenso die Typedefiniton


---
